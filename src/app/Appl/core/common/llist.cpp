/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "llist.h"

/**********************************************************************************************************************
 *  PREPROCESSOR DEFINITIONS
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * LOCAL TYPEDEFS DECLARATION
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * GLOBAL VARIABLES DECLARATION
 *********************************************************************************************************************/


/**********************************************************************************************************************
 * LOCAL FUNCTION DECLARATION
 *********************************************************************************************************************/


/**********************************************************************************************************************
 * LOCAL FUNCTION DEFINITION
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * GLOBAL FUNCTION DEFINITION
 *********************************************************************************************************************/
xml_line_t *llist_init(void) {
    xml_line_t *head = NULL;

    head = (xml_line_t *) malloc(sizeof(xml_line_t));
    if (NULL == head)
        fprintf(stderr, "ERROR: Error allocation list head.\n");

    return head;
}


void llist_push(xml_line_t *head, char *val) {
    xml_line_t *new_node = NULL;
    int space_cnt = 0;

    if (NULL == head) {
        fprintf(stderr, "ERROR: Given list head is NULL.\n");
        return;
    }

    while (head->next != NULL)
        head = head->next;

    new_node = (xml_line_t *) malloc(sizeof(xml_line_t));
    new_node->next = NULL;

    while(val[space_cnt] == ' ')
        space_cnt++;

    strcpy(head->val, val + space_cnt);
    head->next = new_node;
}


int llist_pop(xml_line_t **head) {
    xml_line_t *next_node = NULL;

    if (*head == NULL)
        return -1;
    
    next_node = (*head)->next;
    free(*head);
    *head = next_node;

    return (head == NULL) ? 0 : 1;
}


void llist_free(xml_line_t *head) {
    xml_line_t *curr = head;
    int ret = 0;

    while (curr != NULL)
        ret = llist_pop(&curr);

}

/***********************************************************************************************************************
 * END OF FILE
 **********************************************************************************************************************/
